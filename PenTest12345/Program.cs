using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using LinqToTwitter;
using Newtonsoft.Json;


namespace PenTest12345
{
    internal class Program
    {
        static void Main()
        {
            Console.WriteLine("Program started.");
            try
            {
                ReadTweet();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            MakeRequest();            
            Console.Read();       
        }

        static void ReadTweet()       
        {
            var auth = new SingleUserAuthorizer
            {
                CredentialStore = new SingleUserInMemoryCredentialStore
                {
                    ConsumerKey = "",
                    ConsumerSecret = "",
                    AccessToken = "",
                    AccessTokenSecret = ""
                }
            };
            
            List<Status> searchResponse = new List<Status>();
            //Will most likely get around wantedAmountOfTweets+100 tweets because 
            //even if search.Count == 100 it usually returns 95-100.
            int wantedAmountOfTweets = 1000;
            int currentAmountOfTweets = 0;
            //lastId is used so there won't be multiples of the same tweet
            ulong lastId = 0;

            var twitterCtx = new TwitterContext(auth);            
            var singleTweet = Enumerable.FirstOrDefault(
                from search in twitterCtx.Search
                where search.Type == SearchType.Search &&
                      search.Query == "\"Marketing\"" &&
                      search.Count == 1 &&
                      search.SearchLanguage == "en"
                select search);
          
            lastId = singleTweet.Statuses[0].StatusID;
            
            do
            {
                var tweets = Enumerable.FirstOrDefault(
                    from search in twitterCtx.Search
                    where search.Type == SearchType.Search &&
                          search.Query == "\"Marketing\"" &&
                          search.Count == 100 &&
                          search.SearchLanguage == "en" &&
                          search.MaxID == lastId

                    select search);

            searchResponse.AddRange(tweets.Statuses.ToList());
            lastId = tweets.Statuses.Min(x => x.StatusID);
            currentAmountOfTweets = searchResponse.Count;
            } while (currentAmountOfTweets <= wantedAmountOfTweets);
            
            using (StreamWriter sw = new StreamWriter("/Path/MarketingTweetsSimpleJson.txt"))
            {
                int i = 0;
                foreach (var entry in searchResponse)
                {                 
                    string text;                 
                    //So we don't get a "Bad request" from the server
                    entry.Text = entry.Text.Replace('\"', ' ');
                    
                    //Language is an optional parameter
                    //The tweets are here given unique IDs
                    if (i != currentAmountOfTweets)
                    {
                        text = "{\"language\":\"en\",\"id\":\""+i+"\",\"text\":\"" + entry.Text + "\"},";
                    }
                    else
                    {
                        text = "{\"language\":\"en\",\"id\":\""+i+"\",\"text\":\"" + entry.Text + "\"}";
                    }                    
                    sw.WriteLine(text);
                    i++;                   
                }
            }
                       
            //MarketingTweetsFullJson is not used. This is simply for reference if needed at a later stage.
            using (StreamWriter sw = new StreamWriter("/Path/MarketingTweetsFullJson.txt"))
            {
                foreach (var entry in searchResponse)
                {                    
                    sw.WriteLine(JsonConvert.SerializeObject(entry));                    
                }
            }           
        }

        static async void MakeRequest()
        {
            var client = new HttpClient();
            HttpResponseMessage postResponse;
            
            // Request headers
            client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", "");
            
            var uri = "https://westus.api.cognitive.microsoft.com/text/analytics/v2.0/topics";
            // Request body
            string body;
            using (StreamReader sr =
                new StreamReader("/Path/MarketingTweetsSimpleJson.txt"))
            {
                body = sr.ReadToEnd();
            }

            byte[] byteData = Encoding.UTF8.GetBytes(
                "{\"documents\": [" + body + "]}");
            
            using (var content = new ByteArrayContent(byteData))
            {
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                postResponse = await client.PostAsync(uri, content);
            }
           
            if (postResponse.IsSuccessStatusCode)
            {
                HttpResponseMessage getResponse;                
                string getResponseContent;                                                
                IEnumerable<string> postResponseHeaderEnumerable = postResponse.Headers.GetValues("Operation-Location");
                var postResponseOperationLocation = postResponseHeaderEnumerable.FirstOrDefault();
                
                //Polls GET-request untill the server returns "status = succeded"
                while (true)
                {
                     getResponse = await client.GetAsync(postResponseOperationLocation);
                     getResponseContent = await getResponse.Content.ReadAsStringAsync();                    
                     Console.WriteLine("Running...");
                     if (getResponseContent.Contains("Succeeded"))
                     {
                        break;
                     }
                    Thread.Sleep(60000); //Sleeps 1 minute
                }
                                              
                using (StreamWriter sw = new StreamWriter("/Path/TopicResults.txt"))
                {                    
                    Console.WriteLine("Success!");
                    sw.WriteLine(getResponseContent);                                        
                }
            }
            else
            {
                Console.WriteLine("Failed with status code: {0}", postResponse.StatusCode);
            }
        }
    }
}
